import{statSync,readSync,readFileSync,writeFileSync,closeSync,openAssetsSync,mkdirSync,openSync,writeSync,rmSync,readdirSync,statAssetsSync,O_RDONLY,O_CREAT,O_WRONLY,O_RDWR,O_TRUNC}from"@zos/fs";const VERSION="1.0.0";const DEBUG_LOG_LEVEL=1;export class Storage{static WriteJson(filename,json){saveJson(filename,json)}static ReadJson(filename){return loadJson(filename)}static ReadAssetFallback(filename,return_json=false){return readAssetFallback(filename,return_json)}static WriteFile(filename,data){writeFile(filename,data)}static ReadFile(filename){return readFile(filename)}static RemoveFile(filename){return removeFile(filename)}static WriteAsset(filename,data){writeAsset(filename,data)}static ReadAsset(filename){return readAsset(filename)}static AssetExists(filename){return assetExists(filename)}static MakeDirectory(dirname){return makeDirectory(dirname)}static ListDirectory(dirname){return listDirectory(dirname)}}function openFile(path,flags){try{return openSync({path:path,flag:flags})}catch(error){debugLog(1,`Failed to open file '${path}':`,error);return null}}function writeFile(filename,data){try{writeFileSync({path:filename,data:data,options:{encoding:"utf8"}});debugLog(3,`writeFileSync success, data written to '${filename}'`)}catch(error){debugLog(1,`writeFileSync failed for '${filename}':`,error)}}function advancedWriteFile(filename,data,options={}){let fd=null;try{const flags=options.append?O_RDWR|O_CREAT:O_WRONLY|O_CREAT;debugLog(3,`Opening file '${filename}' with flags:`,flags);fd=openFile(filename,flags);debugLog(3,`File opened with file descriptor: ${fd}`);let buffer;if(typeof data==="string"){buffer=str2ab(data);debugLog(3,`Data converted to ArrayBuffer`)}else{buffer=data}debugLog(3,`Buffer length: ${buffer.byteLength}`);const defaults={offset:0,length:buffer.byteLength,position:options.position!==undefined?options.position:null};debugLog(3,`Writing data with options: offset=${defaults.offset}, length=${defaults.length}, position=${defaults.position}`);const written=writeSync({fd:fd,buffer:buffer,options:defaults});debugLog(3,`Data successfully written to '${filename}', ${written} bytes written.`)}catch(error){debugLog(1,`Failed to write to file '${filename}':`,error)}finally{if(fd!==null){closeSync(fd);debugLog(3,`File descriptor ${fd} closed.`)}}}function readFile(filename){if(!dirOrFileExists(filename)){debugLog(2,`File does not exist: ${filename}`);return""}const str_content=readFileSync({path:filename,options:{encoding:"utf8"}});if(str_content===undefined){debugLog(2,`Failed to read the file: ${filename}`);return""}else{return str_content}}function advancedReadFile(filename){let fd=null;let file_content="";try{fd=openFile(filename,O_RDONLY);debugLog(3,`File opened with file descriptor: ${fd}`);const file_info=statSync({path:filename});if(!file_info){debugLog(2,`Failed to get file info: ${filename}`);return""}const buffer_size=file_info.size;debugLog(3,`File size: ${buffer_size} bytes`);const buffer=new ArrayBuffer(buffer_size);const bytes_read=readSync({fd:fd,buffer:buffer,options:{length:buffer_size,position:null}});debugLog(3,`Bytes read: ${bytes_read}`);file_content=ab2str(buffer)}catch(error){debugLog(1,`Failed to read file '${filename}':`,error);return""}finally{if(fd!==null){closeSync(fd);debugLog(3,`File descriptor ${fd} closed.`)}}return file_content}function removeFile(filename){try{rmSync({path:filename});debugLog(3,`File removed successfully: '${filename}'`)}catch(error){debugLog(1,`Failed to remove file '${filename}':`,error)}}function makeDirectory(directory){try{mkdirSync({path:directory});return true}catch(error){debugLog(1,`Error creating directory '${directory}':`,error);return false}}function listDirectory(directory){try{const files=readdirSync({path:directory});return files}catch(error){debugLog(1,`Error listing directory contents for '${directory}':`,error);return[]}}function assetExists(path){try{const result=statAssetsSync({path:path});if(result){debugLog(3,`Exists. Size: ${result.size} bytes`);return true}else{return false}}catch(error){return false}}function dirOrFileExists(path){try{const stats=statSync({path:path});if(stats===undefined){return false}return true}catch(error){return false}}function removeFileOrDir(path,is_recursive=false){try{if(is_recursive){let files=[];try{files=readdirSync({path:path})}catch(error){}if(files.length>0){files.forEach(file=>{const full_path=`${path}/${file}`;removeFileOrDir(full_path,true)})}rmSync({path:path});debugLog(3,`Removed successfully: '${path}'`)}else{rmSync({path:path});debugLog(3,`Removed successfully: '${path}'`)}}catch(error){debugLog(1,`Failed to remove '${path}':`,error)}}function makeNestedDirectory(directory_path){const path_segments=directory_path.split("/");let cur_path="";for(const segment of path_segments){cur_path+=`${segment}/`;if(!dirOrFileExists(cur_path)){debugLog(3,`Creating directory: ${cur_path}`);mkdirSync({path:cur_path})}}}function writeAsset(filename,data){const buffer=str2ab(data);const file=openAssetsSync({path:filename,flag:O_WRONLY|O_CREAT});const result=writeSync({fd:file,buffer:buffer});if(result>=0){debugLog(2,`writeSync success, wrote ${result} bytes`)}else{debugLog(1,"writeSync failed")}closeSync(file)}function readAsset(filename){const file_info=statSync({path:filename});if(file_info){const fd=openAssetsSync({path:filename,flag:O_RDONLY});if(fd!==undefined){const file_content_buff=new ArrayBuffer(file_info.size);const bytes_read=readSync({fd:fd,buffer:file_content_buff,offset:0,length:file_info.size,position:null});if(bytes_read>0){debugLog(2,`readSync success, read ${bytes_read} bytes`);return ab2str(file_content_buff)}else{debugLog(1,"readSync failed or read 0 bytes")}closeSync(fd)}else{debugLog(1,"Failed to open file")}}else{debugLog(1,"File does not exist:",filename)}return null}function saveJson(filename,json){writeFile(filename,JSON.stringify(json))}function readAssetFallback(path,return_json=false){const fd=openAssetsSync({path:path,flag:O_RDONLY});if(!fd){debugLog(1,"Failed to open asset file:",path);return null}const buf_size=131072;const buffer=new ArrayBuffer(buf_size);const bytes_read=readSync({fd:fd,buffer:buffer});closeSync(fd);if(bytes_read>0){const view=new Uint8Array(buffer,0,bytes_read);let content=utf8ArrayToStr(view);if(return_json){try{const json=JSON.parse(content);return json}catch(parse_err){debugLog(1,"Failed to parse JSON from asset file:",path,parse_err);return content}}else{return content}}else{debugLog(3,"Failed to read from asset file:",path);return null}}function loadJson(filename){let json;try{const val=readFile(filename);if(val===""){return null}json=JSON.parse(val)}catch{return null}return json}function ab2str(buffer){debugLog(3,`Converting buffer to str`);return String.fromCharCode.apply(null,new Uint8Array(buffer))}function str2ab(str){var buf=new ArrayBuffer(str.length);var buf_view=new Uint8Array(buf);for(var i=0,strLen=str.length;i<strLen;i++){buf_view[i]=str.charCodeAt(i)}return buf}String.prototype.toHex=function(){let result="";for(let i=0;i<this.length;i++){result+=this.codePointAt(i).toString(16)}return result};String.prototype.fromHex=function(){let hex_string=this.toString();let result="";for(let i=0;i<hex_string.length;i+=2){result+=String.fromCodePoint(Number.parseInt(hex_string.substr(i,2),16))}return result};function logObject(obj,indent=""){for(const[key,val]of Object.entries(obj)){if(typeof val==="object"&&val!==null){console.log(`${indent}${key}:`);logObject(val,indent+"  ")}else{console.log(`${indent}${key}: ${val}`)}}}function utf8ArrayToStr(array){var out,i,len,c;var char2,char3;out="";len=array.length;i=0;while(i<len){c=array[i++];switch(c>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:out+=String.fromCharCode(c);break;case 12:case 13:char2=array[i++];out+=String.fromCharCode((c&31)<<6|char2&63);break;case 14:char2=array[i++];char3=array[i++];out+=String.fromCharCode((c&15)<<12|(char2&63)<<6|char3&63);break;case 15:i+=3;break}}return out}function debugLog(level,...params){if(level<=DEBUG_LOG_LEVEL){const trunc_params=params.map(param=>{const MAX_ITEMS=2;if(Array.isArray(param)&&param.length>MAX_ITEMS){return[...param.slice(0,MAX_ITEMS)," ...more"]}else{return param}});console.log(`[storage v${VERSION}]`,...trunc_params)}}