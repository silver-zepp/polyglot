import{getPackageInfo}from"@zos/app";import{getLanguage}from"@zos/settings";import{replace}from"@zos/router";import{getDeviceInfo,SCREEN_SHAPE_SQUARE}from"@zos/device";import hmUI,{createWidget,widget,prop}from"@zos/ui";import{px}from"@zos/utils";import{getImageInfo}from"@zos/ui";import{onGesture,offGesture,GESTURE_RIGHT}from"@zos/interaction";import{Storage}from"./libs/easy-storage-core";import{debugLog,setupLogger}from"./libs/silver-log";import{createPicker}from"./libs/silver-widgets";const POLY_VERSION="1.0.0";setupLogger({prefix:"poly v"+POLY_VERSION,level:1});const app=getPackageInfo();const sys_lang_code=getLanguage();const{width:DEVICE_WIDTH,height:DEVICE_HEIGHT,screenShape:SCREEN_SHAPE}=getDeviceInfo();const language_db={0:{code:"zh-CN",name:"Chinese"},1:{code:"zh-TW",name:"Taiwanese"},2:{code:"en-US",name:"English"},3:{code:"es-ES",name:"Spanish"},4:{code:"ru-RU",name:"Russian"},5:{code:"ko-KR",name:"Korean"},6:{code:"fr-FR",name:"French"},7:{code:"de-DE",name:"German"},8:{code:"id-ID",name:"Indonesian"},9:{code:"pl-PL",name:"Polish"},10:{code:"it-IT",name:"Italian"},11:{code:"ja-JP",name:"Japanese"},12:{code:"th-TH",name:"Thai"},13:{code:"ar-EG",name:"Arabic"},14:{code:"vi-VN",name:"Vietnamese"},15:{code:"pt-PT",name:"Portuguese"},16:{code:"nl-NL",name:"Dutch"},17:{code:"tr-TR",name:"Turkish"},18:{code:"uk-UA",name:"Ukrainian"},19:{code:"iw-IL",name:"Hebrew"},20:{code:"pt-BR",name:"Portuguese"},21:{code:"ro-RO",name:"Romanian"},22:{code:"cs-CZ",name:"Czech"},23:{code:"el-GR",name:"Greek"},24:{code:"sr-RS",name:"Serbian"},25:{code:"ca-ES",name:"Catalan"},26:{code:"fi-FI",name:"Finnish"},27:{code:"nb-NO",name:"Norwegian"},28:{code:"da-DK",name:"Danish"},29:{code:"sv-SE",name:"Swedish"},30:{code:"hu-HU",name:"Hungarian"},31:{code:"ms-MY",name:"Malay"},32:{code:"sk-SK",name:"Slovak"},33:{code:"hi-IN",name:"Hindi"}};const lang_relatability={0:1,1:0,15:20,20:15,18:4};export class Polyglot{#texts={};#language="en-US";#poly_config="poly_config.json";#polyroot_path="assets://raw/polyglot";#translations_path=this.#polyroot_path+"/translations";#icon_normal_path=this.#polyroot_path+"/poly-selector.png";#icon_pressed_path=this.#polyroot_path+"/poly-selector-press.png";#icon_resolution=64;#btn_icon=null;#subscribers_arr=[];#languages_arr=[];#default_lang=app.defaultLanguage;#is_using_fallback=false;constructor(){let should_recache=false;let files=[];const saved_poly_config=Storage.ReadJson(this.#poly_config)||{};if(!saved_poly_config.poly_version||saved_poly_config.poly_version!==POLY_VERSION||saved_poly_config.app_version!==app.version){should_recache=true;saved_poly_config.poly_version=POLY_VERSION;saved_poly_config.app_version=app.version;debugLog(3,"Version mismatch detected or no saved config. Triggering recache.")}if(should_recache||!saved_poly_config.files){files=Storage.ListDirectory(this.#translations_path)||[];if(!Array.isArray(files)||files.length===0){debugLog(3,"No files found or not an array. Using fallback.");this.#is_using_fallback=true;files=Object.values(language_db).map(lang=>`${lang.code}.json`).filter(filename=>{const fpath=`raw/polyglot/translations/${filename}`;return Storage.AssetExists(fpath)});debugLog(3,`Fallback files found: ${files.join(", ")}`)}else{this.#is_using_fallback=false;debugLog(3,`Files found in translations path: ${files.join(", ")}`)}saved_poly_config.files=files.map(file=>file.replace(".json",""));saved_poly_config.is_using_fallback=this.#is_using_fallback;Storage.WriteJson(this.#poly_config,saved_poly_config)}else{files=saved_poly_config.files.map(file=>`${file}.json`);this.#is_using_fallback=saved_poly_config.is_using_fallback}this.#languages_arr=saved_poly_config.files||[];debugLog(3,`Languages available: ${this.#languages_arr.join(", ")}`);const cur_sys_lang_code=this.getSysLangCode();debugLog(3,`System language code: ${cur_sys_lang_code}`);debugLog(3,`Checking if system language (${cur_sys_lang_code}) is in available languages: ${this.#languages_arr.includes(cur_sys_lang_code)}`);if(saved_poly_config.sys_lang_code&&cur_sys_lang_code!==saved_poly_config.sys_lang_code){if(this.#languages_arr.includes(cur_sys_lang_code)){debugLog(3,`System language (${cur_sys_lang_code}) is directly supported. Setting it.`);this.setLanguage(cur_sys_lang_code)}else{debugLog(3,`System language (${cur_sys_lang_code}) not directly supported. Checking for related language.`);const related_lang_code=this.getRelatedLangCode(cur_sys_lang_code);debugLog(3,`Related language code determined as: ${related_lang_code}`);this.setLanguage(related_lang_code)}}else if(saved_poly_config.language&&this.#languages_arr.includes(saved_poly_config.language)){debugLog(3,`Using saved language: ${saved_poly_config.language}`);this.#language=saved_poly_config.language}else{debugLog(3,`No saved language or system language not available. Checking for related or default language.`);const related_lang_code=this.getRelatedLangCode(cur_sys_lang_code);debugLog(3,`Related or default language determined as: ${related_lang_code}`);this.#language=related_lang_code}try{this.#texts=this.#readJsonWithFallback(`${this.#translations_path}/${this.#language}.json`);debugLog(3,`Loaded texts for language: ${this.#language}`)}catch(err){debugLog(3,`Error loading translations for language ${this.#language}:`,err);this.#language=this.#default_lang;this.#texts={}}saved_poly_config.sys_lang_code=cur_sys_lang_code;saved_poly_config.language=this.#language;Storage.WriteJson(this.#poly_config,saved_poly_config);debugLog(3,`Updated saved config with current system language and language: ${JSON.stringify(saved_poly_config)}`);const icon_path=this.#is_using_fallback?`raw/polyglot/poly-selector.png`:this.#icon_normal_path;this.#setIconResolutionFromImage(icon_path)}setLanguage(language,restart_app=false){if(language!==this.#language){const lang_entry=Object.values(language_db).find(lang=>lang.code===language);if(lang_entry){this.#language=lang_entry.code}else{const related_lang_code=this.getRelatedLangCode(language);this.#language=related_lang_code||this.#default_lang}try{this.#texts=this.#readJsonWithFallback(`${this.#translations_path}/${this.#language}.json`);Storage.WriteJson(this.#poly_config,{language:this.#language,sys_lang_code:this.getSysLangCode()});if(!restart_app){this.#notifySubs()}}catch(err){debugLog(1,"Error setting language or loading translations:",err)}if(restart_app){this.#restartApp()}}}setIconPath(paths){this.#icon_normal_path=paths.normal;this.#icon_pressed_path=paths.pressed}getLanguage(){return this.#language}showPolyBubble(options={}){const defaults={location:"top-left",padding_mult:2,icon_size:this.#icon_resolution,padding:Math.round(Math.min(DEVICE_WIDTH,DEVICE_HEIGHT)*.05),x:null,y:null,offset_x:0,offset_y:0,restart_app:false};const{location,padding_mult,icon_size,padding,x,y,offset_x,offset_y,restart_app}={...defaults,...options};const half_icon=icon_size/2;let icon_x,icon_y;if(x!==null&&y!==null){icon_x=x;icon_y=y}else{switch(location){case"top-left":icon_x=SCREEN_SHAPE===SCREEN_SHAPE_SQUARE?padding*padding_mult:padding*padding_mult+half_icon;icon_y=padding*padding_mult;break;case"top-right":icon_x=SCREEN_SHAPE===SCREEN_SHAPE_SQUARE?DEVICE_WIDTH-icon_size-padding*padding_mult:DEVICE_WIDTH-icon_size-padding*padding_mult-half_icon;icon_y=padding*padding_mult;break;case"bot-left":icon_x=SCREEN_SHAPE===SCREEN_SHAPE_SQUARE?padding*padding_mult:padding*padding_mult+half_icon;icon_y=DEVICE_HEIGHT-icon_size-padding*padding_mult;break;case"bot-right":icon_x=SCREEN_SHAPE===SCREEN_SHAPE_SQUARE?DEVICE_WIDTH-icon_size-padding*padding_mult:DEVICE_WIDTH-icon_size-padding*padding_mult-half_icon;icon_y=DEVICE_HEIGHT-icon_size-padding*padding_mult;break}}icon_x+=offset_x;icon_y+=offset_y;this.#btn_icon=createWidget(widget.BUTTON,{x:px(icon_x),y:px(icon_y),w:px(icon_size),h:px(icon_size),normal_src:"raw/polyglot/poly-selector.png",press_src:"raw/polyglot/poly-selector-press.png",click_func:()=>{this.showLangPicker({restart_app:restart_app})}})}hidePolyBubble(){hmUI.deleteWidget(this.#btn_icon)}showLangPicker(options={}){const inverted_language_db=Object.values(language_db).reduce((acc,{code,name})=>{acc[code]=name;return acc},{});const sorted_lang_entries=this.#languages_arr.map(code=>{const name=inverted_language_db[code]||code;return{code:code,name:name}}).sort((a,b)=>a.name.localeCompare(b.name));const lang_names=sorted_lang_entries.map(entry=>entry.name);const lang_codes=sorted_lang_entries.map(entry=>entry.code);const cur_lang_index=lang_codes.indexOf(this.#language);const picker=createPicker({data_array:lang_names,selected_index:cur_lang_index,use_rotation_algo:true,onItemPress:(widget_type,index,label)=>{const selected_language_code=lang_codes[index];this.setLanguage(selected_language_code,options.restart_app);picker.remove();offGesture()},onItemFocusChange:(list,index,focus)=>{}});const cb_gesture=event=>{if(event===GESTURE_RIGHT){picker.remove();offGesture();return true}return false};onGesture({callback:cb_gesture})}getIconResolution(){return this.#icon_resolution}getLangDisplayName(){const lang_entry=Object.values(language_db).find(lang=>lang.code===this.#language);return lang_entry?lang_entry.name:undefined}getSysLangName(){return language_db[sys_lang_code]?.name}getSysLangCode(){return language_db[sys_lang_code]?.code}getRelatedLangCode(language){if(this.#languages_arr.includes(language)){debugLog(3,`Original language (${language}) is supported. No need to find a related language.`);return language}const lang_code_key=Object.keys(language_db).find(key=>language_db[key].code===language);const rel_code=lang_relatability[lang_code_key];const rel_lang_code=rel_code!==undefined?language_db[rel_code].code:this.#default_lang;debugLog(3,`Calculated related language code for (${language}) as: ${rel_lang_code}`);return rel_lang_code}getText(key){return this.#texts[key]||`"${key}"\nnot found`}getAllTexts(){return this.#texts}getSupportedLanguages(){return this.#languages_arr}getAvailableTranslationsForKey(key){return this.#languages_arr.map(lang_code=>{const texts=this.#readJsonWithFallback(`${this.#translations_path}/${lang_code}.json`);return{lang_code:lang_code,text:texts[key]}}).filter(item=>item.text!==undefined)}onLanguageChange(subscriber){this.#subscribers_arr.push(subscriber)}isLanguageSupported(language_code){return this.#languages_arr.includes(language_code)}#notifySubs(){this.#subscribers_arr.forEach(sub=>sub(this.#language,this.#texts))}#restartApp(){replace({url:app.pages[0]})}#setIconResolutionFromImage(img_path){try{const img_info=getImageInfo(img_path);this.#icon_resolution=img_info.width}catch(err){this.#icon_resolution=64;debugLog(1,`Failed to get icon resolution: ${err}`)}}#readJsonWithFallback(path){if(this.#is_using_fallback){const modified_path=path.replace("assets://","");return Storage.ReadAssetFallback(modified_path,true)}else{return Storage.ReadJson(path)}}}